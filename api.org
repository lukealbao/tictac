* Server Accepts These Socket Events
** Request New Game
   - /@param/ Request Object
     - opponent (optional) :: the uid of an opponent. If ommitted,
          defaults to 'Machine'.
     - player (optional) :: Either 'x' or 'o'. Defaults to 'x'.

   - /@return/ Response Object
     - error :: Only if error in creating the game.
     - ok :: That way... you have it.
     - gid :: The unique game identifier.
     - player :: 'x' or 'o'. Used to identify DOM pieces.
** Hello
   + /@param/ Request Object
      - user :: a unique id to register the user. Currently
                generatedby a random number.

   + /@return/ null
** Move Request
   + /@param/ Request Object
     - gid :: The unique gid of the current game.
     - player :: The requesting player. Either 'x' or 'o'.
     - from :: The current index of the moving piece.
     - to :: The index requested of the moving piece.
     - piece :: The DOM ID of the piece. E.g., 'player0'.

   + /@return/ Response Object - sent to requester
     - ok :: Boolean.
     - error :: If there is one.
     - errReason :: If there is one.
     - winner :: Null,'x', or 'o'.
     - request :: Ce qui est arrivee comme l'objet de la requete.
     - moves :: A map of DOM ids of elements to their new indexes.
     - nextMove :: 'x' or 'o', whoever's turn it is.
     - x :: The state of all of x's pieces. Used by AI.
     - o :: The state of all of o's pieces. Used by AI.

     
   + /@return/ *Event: 'Your Move'* - Response object sent to opponent
     - ok :: Boolean.
     - error :: If there is one.
     - errReason :: If there is one.
     - winner :: Null,'x', or 'o'.
     - request :: Ce qui est arrivee comme l'objet de la requete.
     - moves :: A map of DOM ids of elements to their new indexes.
     - nextMove :: 'x' or 'o', whoever's turn it is.
     - x :: The state of all of x's pieces. Used by AI.
     - o :: The state of all of o's pieces. Used by AI.


* TODO Fixes
** TODO Animation Z-index
  - Problem :: A moving piece is sent underneath other pieces.
  - Look to Greensock API for z-index while doing `#sendPiece()`.

** TODO Put AI into child processes
  - Problem :: Server becomes unresponsive when searching for a move.
  - Spawn child processes for AI workers.
  - Create a queue for round-robining the workers.
** TODO First Move Problem
  - Problem :: Always chooses an opposite corner.
  - Look to the scoring mechanism.


** DONE Stagger move animations
  - Problem :: Animations happen all at once and is disorienting in a
               bad way.
  - Look to: reforming the `Move Response` API so that a single move
    is in a separate field from the reorientation moves. Then use two
    different timeouts on the client side.
** DONE Send current game state with move request errors
  - Problem :: Certain times, AI appears to move, and it is the
               player's turn; the player takes a move, but most spaces
               are occupied. This will allow debugging.
** DONE Pieces becoming unmovable 
  - Problem :: Unpredictably, a piece is no longer draggable, and
               other moves return as out of bounds.
  - Look to losing consistency between the model and the idxs of DOM
    pieces.
  - Look to the `$env.pendingMoves` issue.
  - Solution :: Added hash to jQuery call in #sendMove

** DONE pendingMoves() doesn't work as expected.
  - Problem :: When moving another piece before submitting a move, the
               first is not sent back, as it should be.
  - This probably affects the prior todo.
  - Solution :: Added hash to jQuery call in #sendMove

